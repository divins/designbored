#deadspace-inventory
  h3 
    span DeadSpace Inventory
    a href='http://designbored.herokuapp.com/#deadspace-inventory' [ Link ]
  p.description This menu is suposed to mimic DeadSpace inventory 3D effect. It' not exactly the same but is close enough for its purpose.
  p.idea-from
    span This concept comes from 
    a href='https://www.youtube.com/watch?v=QKWcSPkzNlM' target='_blank' Watch short video about DeadSpace inventory.

  h4 Demo
  .demo
    .container
      h3#foo Test
      #content
        #sphere style="top: 0px; left: 0px;"
      ul
        li 
          span acceleration x: 
          span#accelerationX
        li 
          span acceleration y: 
          span#accelerationY
        li 
          span acceleration z: 
          span#accelerationZ
        li 
          span rotation alpha: 
          span#rotationAlpha
        li 
          span rotation beta: 
          span#rotationBeta
        li 
          span rotation gamma: 
          span#rotationGamma

      span 
        span test: 
        span#test

      #effect-container
        -15.times do 
          .transform
            a href='http://designbored.herokuapp.com/#deadspace-inventory'
              i.icon-map-marker

      javascript:
        $(function(){
          var row           = 0,
              column        = 0,
              rotation      = 0,
              reset_counter = 1;

          $.each($('.transform'), function(index, element){
            if(reset_counter > 5){
              column = 0
              row++
              reset_counter = 1
            }

            var el = $(element)
            el.css('left', posX(column));
            el.css('top', posY(row, column));
            el.css('-webkit-transform', transformation(row, column));

            column++
            reset_counter++
          });
        });

        function posX(column){
          return 75*column;
        }

        function posY(row, column){
          var offset = 0;
          if(column == 0 || column == 4){ offset = 20; }
          if(column == 1 || column == 3){ offset = 10; }

          return (75*row)+offset;
        }

        function transformation(row, column){
          var rotateY = 0;
          var translateZ = 0;
          if(column == 0){ rotateY = 5;  translateZ = 30; }
          if(column == 1){ rotateY = 3;   translateZ = 20; }
          if(column == 2){ rotateY = 0;   translateZ = 5; }
          if(column == 3){ rotateY = -3;  translateZ = 20; }
          if(column == 4){ rotateY = -5; translateZ = 30; }

          rotation = 'rotateY(' + rotateY + 'deg)',
          translation = 'translate3d(0px, 0px, ' + translateZ + 'px)',
          props = [rotation, translation].join(' ');
          return props;
        }

        var elements    = $('.transform'),
            css         = document.getElementById('css'),
            width       = elements[0].clientWidth,
            height      = elements[0].clientHeight,
            rotateX     = 0,
            rotateY     = 0,
            isDown      = false,
            reverse     = false,
            lastX       ,
            lastY       ;

        window.ondevicemotion = function(event) {
          var x = event.accelerationIncludingGravity.x;  
          var y = event.accelerationIncludingGravity.y;  
          var z = event.accelerationIncludingGravity.z;

          var accData = x+'%, '+ y +'%'+ z +'%';
          $('#foo').html()
        }

        document.addEventListener('mousemove', function(e) {
            if(lastX == undefined){lastX = e.clientX;}
            if(lastY == undefined){lastY = e.clientY;}

            xMultiplier = 180 / height;
            yMultiplier = 180 / width;
            rotateX += (lastY - e.clientY) * xMultiplier;
            rotateY += (lastX - e.clientX) * yMultiplier * (reverse ? 1 : -1);
            rotateX = capRotation(rotateX, 50);
            rotateY = capRotation(rotateY, 100);
            rotateX  = Math.floor(rotateX % 360);
            rotateY  = Math.floor(rotateY % 360);
            reverse  = Math.abs(Math.floor(rotateX / 90) % 4) > 1;
            lastX    = e.clientX;
            lastY    = e.clientY;

            var perspectiveOrigin = rotateY+'% '+rotateX+'%';
            $('#effect-container')[0].style['-webkit-perspective-origin'] = perspectiveOrigin;
            $('h3#foo').html(perspectiveOrigin);
        }, false);

        function capRotation(rotation, cap){
          var rotation;
          if(rotation >= cap+100){ rotation = cap+100 }
          if(rotation <= -cap){ rotation = -cap }
          return rotation;
        }

      javascript:
        var x = 0, y = 0,
        vx = 0, vy = 0,
        ax = 0, ay = 0;

        var sphere = document.getElementById("sphere");

        if (window.DeviceMotionEvent != undefined) {
          window.ondevicemotion = function(e) {
            ax = event.accelerationIncludingGravity.x * 5;
            ay = event.accelerationIncludingGravity.y * 5;
            document.getElementById("accelerationX").innerHTML = e.accelerationIncludingGravity.x;
            document.getElementById("accelerationY").innerHTML = e.accelerationIncludingGravity.y;
            document.getElementById("accelerationZ").innerHTML = e.accelerationIncludingGravity.z;

            if ( e.rotationRate ) {
              document.getElementById("rotationAlpha").innerHTML = e.rotationRate.alpha;
              document.getElementById("rotationBeta").innerHTML = e.rotationRate.beta;
              document.getElementById("rotationGamma").innerHTML = e.rotationRate.gamma;
            }   
          }

          setInterval( function() {
            var landscapeOrientation = window.innerWidth/window.innerHeight > 1;
            if ( landscapeOrientation) {
              vx = vx + ay;
              vy = vy + ax;
            } else {
              vy = vy - ay;
              vx = vx + ax;
            }
            vx = vx * 0.98;
            vy = vy * 0.98;
            y = parseInt(y + vy / 50);
            x = parseInt(x + vx / 50);
            
            boundingBoxCheck();
            
            sphere.style.top = y + "px";
            sphere.style.left = x + "px";
            
          }, 25);
        } 


        function boundingBoxCheck(){
          if (x<0) { x = 0; vx = -vx; }
          if (y<0) { y = 0; vy = -vy; }
          if (x>document.documentElement.clientWidth-20) { x = document.documentElement.clientWidth-20; vx = -vx; }
          if (y>document.documentElement.clientHeight-20) { y = document.documentElement.clientHeight-20; vy = -vy; }
        }

.source-code
  button class='source-code' Source code
  .code
    .comments
      p This code just works in Chrome and Safari as I'm only using '-webkit-' prefixes. 
    script src='https://gist.github.com/divins/7f9789d422a5acde4563.js'

.references
  button class='code-references' Code references
  ul
    li
      a href='http://codepen.io/agelber/pen/HkDvl' http://codepen.io/agelber/pen/HkDvl
    li
      a href='http://learn.shayhowe.com/advanced-html-css/css-transforms/#three-dimensional-transforms' http://learn.shayhowe.com/advanced-html-css/css-transforms/#three-dimensional-transforms

    li
      a href='http://desandro.github.io/3dtransforms/docs/perspective.html' http://desandro.github.io/3dtransforms/docs/perspective.html
