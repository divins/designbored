#threed_inventory
  #effect-container
    .transform
    .transform
    .transform
    .transform
    .transform
    .transform

  #css

  javascript:
    var elements    = $('.transform'),
        css         = document.getElementById('css'),
        width       = elements[0].clientWidth,
        height      = elements[0].clientHeight,
        rotateX     = 0,
        rotateY     = 0,
        scale       = 100,
        isDown      = false,
        reverse     = false,
        lastX       = 0,
        lastY       = 0;

    function scaleVal() {
      var strScale = scale.toString();
      if (scale >= 100) {
        return parseFloat(strScale[0] + '.' +  strScale.slice(1));
      }
      return parseFloat('0.' + strScale);
    }

    function updateTransform() {
      var xProp = 'rotateX('     + rotateX     + 'deg)',
          yProp = 'rotateY('     + rotateY     + 'deg)',
          sProp = 'scale('       + scaleVal()  +    ')',
          tXProp = 'translateX('     + rotateY*4     + 'px)',
          tYProp = 'translateY('     + rotateX     + 'px)',
          props = [xProp, yProp, sProp, tXProp, tYProp].join(' ');

      $.each(elements, function(index, element){
        var zTranslate;
        if(index==0 || index==2 || index==3 || index==5){ zTranslate = '30' }
        else{ zTranslate = '0' }

        var tZProp = 'translateZ('     + zTranslate     + 'px)'

        props = [xProp, yProp, sProp, tXProp, tYProp, tZProp].join(' ');
        element.style[Modernizr.prefixed('transform')] = props;
      });
      css.innerText = props;
    }

    function wheel(e) {
      e.preventDefault();
      var delta = e.wheelDelta || -e.detail;
      scale += delta > 0 ? 5 : -5;
      updateTransform();
    }

    /*el.addEventListener('mousewheel', wheel, false);*/
    /*el.addEventListener('DOMMouseScroll', wheel, false);*/

    document.addEventListener('mousemove', function(e) {
        xMultiplier = 180 / height / scaleVal();
        yMultiplier = 180 / width  / scaleVal();
        rotateX += (lastY - e.clientY) * xMultiplier;
        rotateY += (lastX - e.clientX) * yMultiplier * (reverse ? 1 : -1);
        rotateX = capRotation(rotateX, 20);
        rotateY = capRotation(rotateY, 45);
        rotateX  = Math.floor(rotateX % 360);
        rotateY  = Math.floor(rotateY % 360);
        reverse  = Math.abs(Math.floor(rotateX / 90) % 4) > 1;
        lastX    = e.clientX;
        lastY    = e.clientY;
        /*updateTransform();*/

        var perspectiveOrigin = rotateY+'% '+rotateX+'%';
        $('#effect-container')[0].style['-webkit-perspective-origin'] = perspectiveOrigin;
        css.innerText = perspectiveOrigin;
    }, false);

    function capRotation(rotation, cap){
      var rotation;
      if(rotation >= cap){ rotation = cap }
      if(rotation <= -cap){ rotation = -cap }
      return rotation;
    }
